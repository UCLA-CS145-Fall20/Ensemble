import pandas as pdfrom Utilities.extractor import get_state_ndays_data,stack_state_ndays_data, STATE_NAMEfrom scipy.optimize import nnlsimport numpy as npfrom Utilities.losses import MAPELossclass Ensemble_model:    def __init__(self, input_dict, output_dict):        # self.model_list = model_list        self.confirm_weight = []        self.death_weight = []        for state_name in STATE_NAME:            # print(input_dict[state_name]["Confirmed"].shape)            # print(output_dict[state_name]["Confirmed"].shape)            self.confirm_weight.append(nnls(input_dict[state_name]["Confirmed"],                                            output_dict[state_name]["Confirmed"])[0].reshape(3,1))            self.death_weight.append(nnls(input_dict[state_name]["Deaths"],                                          output_dict[state_name]["Deaths"])[0].reshape(3,1))        self.confirm_weight = np.hstack(self.confirm_weight)        self.death_weight = np.hstack(self.death_weight)        print(self.confirm_weight)    def loss(self, input, ndays, target):        return MAPELoss(self.predict_confirm(input, ndays).reshape(-1), target)    def predict_confirm(self, X, ndays):        # print(X.shape)        assert(X.shape[0] == ndays * 50)        assert(X.shape[1] == 3)        ndays_res = []        for i in range(ndays):            daily_fifty_states = X[i*50:(i+1)*50, :]            # print("daily_fifty_state shape {}".format(daily_fifty_states.shape))            # print("self.confirm_weight shape {}".format(self.confirm_weight.shape))            daily_res = np.diag((daily_fifty_states @ self.confirm_weight)).reshape(50,1)            ndays_res.append(daily_res)        return np.vstack(ndays_res)    def predict_death(self, X, ndays):        assert(X.shape[0] == ndays * 50)        assert(X.shape[1] == 3)        ndays_res = []        for i in range(ndays):            daily_fifty_states = X[i*50:(i+1)*50, :]            daily_res = np.diag((daily_fifty_states @ self.death_weight)).reshape(50,1)            ndays_res.append(daily_res)        return np.vstack(ndays_res)if __name__ == '__main__':    validation_1 = pd.read_csv('outputs/validation/validation_output1.csv')    validation_2 = pd.read_csv('outputs/validation/validation_output2.csv')    validation_3 = pd.read_csv('outputs/validation/validation_output3.csv')    ndays = 7    # make 50 matrices, each of size train_day * model_len, (7 * 3 in our case)    input_dict = {}    df = pd.read_csv('Utilities/data/train.csv')    output_dict = {}    for i, state_name in enumerate(STATE_NAME):        # please hardcode the shape        confirmed_1 = validation_1["Confirmed"][validation_1["ForecastID"] % 50 == i].to_numpy().reshape(ndays,1)        confirmed_2 = validation_2["Confirmed"][validation_2["ForecastID"] % 50 == i].to_numpy().reshape(ndays,1)        confirmed_3 = validation_3["Confirmed"][validation_3["ForecastID"] % 50 == i].to_numpy().reshape(ndays,1)        d_1 = validation_1["Deaths"][validation_1["ForecastID"] % 50 == i].to_numpy().reshape(ndays, 1)        d_2 = validation_2["Deaths"][validation_2["ForecastID"] % 50 == i].to_numpy().reshape(ndays, 1)        d_3 = validation_3["Deaths"][validation_3["ForecastID"] % 50 == i].to_numpy().reshape(ndays, 1)        input_dict[state_name] = {"Confirmed": np.hstack([confirmed_1, confirmed_2, confirmed_3]),                                  "Deaths": np.hstack([d_1, d_2, d_3])}        train_set = get_state_ndays_data(df, state_name, '08-25-2020', '08-31-2020')        gt_confirmed = train_set["Confirmed"]        gt_death = train_set["Deaths"]        output_dict[state_name] = {"Confirmed": gt_confirmed, "Deaths" : gt_death}    # print("input_dict {}".format(input_dict))    test_dict = {}    model = Ensemble_model(input_dict, output_dict)    stacked_confirmed_input = np.hstack([validation_1["Confirmed"].to_numpy().reshape(-1, 1),                                         validation_2["Confirmed"].to_numpy().reshape(-1, 1),                                         validation_3["Confirmed"].to_numpy().reshape(-1, 1)])    confirm_loss = model.loss(stacked_confirmed_input, 7, stack_state_ndays_data(df, STATE_NAME,'08-25-2020', '08-31-2020',                                                                                 False)["Confirmed"].to_numpy())    print("confirm_loss {}".format(confirm_loss))    stacked_death_input = np.hstack([validation_1["Deaths"].to_numpy().reshape(-1, 1),                                         validation_2["Deaths"].to_numpy().reshape(-1, 1),                                         validation_3["Deaths"].to_numpy().reshape(-1, 1)])    death_loss = model.loss(stacked_death_input, 7, stack_state_ndays_data(df, STATE_NAME,'08-25-2020', '08-31-2020',                                                                                 False)["Deaths"].to_numpy())    print("death_loss {}".format(death_loss))